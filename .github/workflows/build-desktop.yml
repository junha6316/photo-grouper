name: Build and Deploy Desktop App

on:
  push:
    paths:
      - "packages/desktop/**"
      - ".github/workflows/build-desktop.yml"
    branches:
      - main
      - develop
  pull_request:
    paths:
      - "packages/desktop/**"
    branches:
      - main

env:
  PYTHON_VERSION: "3.13"

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: macos
            artifact: photo-grouper-macos.dmg
            build_command: |
              # Install create-dmg for macOS packaging
              brew install create-dmg
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Create DMG
              create-dmg \
                --volname "Photo Grouper" \
                --window-pos 200 120 \
                --window-size 800 400 \
                --icon-size 100 \
                --icon "Photo Grouper.app" 200 190 \
                --hide-extension "Photo Grouper.app" \
                --app-drop-link 600 185 \
                "photo-grouper-macos.dmg" \
                "dist/"

          - os: windows-latest
            target: windows
            artifact: photo-grouper-windows.exe
            build_command: |
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Move and rename the executable
              mv "dist/Photo Grouper.exe" "photo-grouper-windows.exe"


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Setup Python and dependencies
        env:
          # Force CPU-only PyTorch to reduce size
          PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cpu"
        run: |
          cd packages/desktop
          mise install python
          uv sync

      - name: Install PyInstaller
        run: |
          cd packages/desktop
          uv add --dev pyinstaller

      - name: Create placeholder icon files (if not exist)
        shell: bash
        run: |
          mkdir -p assets
          # Create placeholder icons if they don't exist
          if [ ! -f "assets/icon.icns" ] && [ "${{ matrix.target }}" = "macos" ]; then
            # Create a simple placeholder icon for macOS (create a minimal valid ICNS file)
            echo "Creating placeholder icon for macOS"
            # Create a minimal ICNS file header
            printf '\x69\x63\x6e\x73\x00\x00\x00\x08' > assets/icon.icns
          fi
          if [ ! -f "assets/icon.ico" ] && [ "${{ matrix.target }}" = "windows" ]; then
            # Create a simple placeholder icon for Windows (create a minimal valid ICO file)
            echo "Creating placeholder icon for Windows"
            # Create a minimal ICO file header
            printf '\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x00\x00\x00\x00\x28\x01\x00\x00\x16\x00\x00\x00' > assets/icon.ico
            # Add minimal bitmap data (40 bytes for header + 64 bytes for image data + 32 bytes for mask)
            dd if=/dev/zero bs=136 count=1 >> assets/icon.ico 2>/dev/null || true
          fi

      - name: Build application
        shell: bash
        run: |
          cd packages/desktop
          ${{ matrix.build_command }}

      - name: Compress build artifacts
        shell: bash
        run: |
          cd packages/desktop
          if [ -f "${{ matrix.artifact }}" ]; then
            echo "Original file size: $(stat -f%z "${{ matrix.artifact }}" 2>/dev/null || stat -c%s "${{ matrix.artifact }}" 2>/dev/null) bytes"
            
            # Try multiple compression methods and choose the best one
            echo "Testing compression methods..."
            
            # Method 1: gzip -9 (current)
            cp "${{ matrix.artifact }}" "${{ matrix.artifact }}.temp1"
            gzip -9 "${{ matrix.artifact }}.temp1"
            gzip_size=$(stat -f%z "${{ matrix.artifact }}.temp1.gz" 2>/dev/null || stat -c%s "${{ matrix.artifact }}.temp1.gz" 2>/dev/null)
            echo "gzip -9 size: $gzip_size bytes"
            
            # Method 2: xz -9 (better compression)
            if command -v xz >/dev/null 2>&1; then
              cp "${{ matrix.artifact }}" "${{ matrix.artifact }}.temp2"
              xz -9 "${{ matrix.artifact }}.temp2"
              xz_size=$(stat -f%z "${{ matrix.artifact }}.temp2.xz" 2>/dev/null || stat -c%s "${{ matrix.artifact }}.temp2.xz" 2>/dev/null)
              echo "xz -9 size: $xz_size bytes"
              
              # Choose the better compression
              if [ "$xz_size" -lt "$gzip_size" ]; then
                echo "Using xz compression (better ratio)"
                mv "${{ matrix.artifact }}.temp2.xz" "${{ matrix.artifact }}.xz"
                rm -f "${{ matrix.artifact }}.temp1.gz"
                echo "Compressed to ${{ matrix.artifact }}.xz"
                echo "Final compressed size: $xz_size bytes"
                echo "COMPRESSION_EXT=.xz" >> $GITHUB_ENV
              else
                echo "Using gzip compression"
                mv "${{ matrix.artifact }}.temp1.gz" "${{ matrix.artifact }}.gz"
                rm -f "${{ matrix.artifact }}.temp2.xz"
                echo "Compressed to ${{ matrix.artifact }}.gz"
                echo "Final compressed size: $gzip_size bytes"
                echo "COMPRESSION_EXT=.gz" >> $GITHUB_ENV
              fi
            else
              echo "xz not available, using gzip"
              mv "${{ matrix.artifact }}.temp1.gz" "${{ matrix.artifact }}.gz"
              echo "Compressed to ${{ matrix.artifact }}.gz"
              echo "Final compressed size: $gzip_size bytes"
              echo "COMPRESSION_EXT=.gz" >> $GITHUB_ENV
            fi
            
            # Calculate compression ratio
            original_size=$(stat -f%z "${{ matrix.artifact }}" 2>/dev/null || stat -c%s "${{ matrix.artifact }}" 2>/dev/null)
            final_size=$([ "$COMPRESSION_EXT" = ".xz" ] && echo $xz_size || echo $gzip_size)
            ratio=$(echo "scale=2; ($original_size - $final_size) * 100 / $original_size" | bc -l 2>/dev/null || echo "N/A")
            echo "Compression ratio: ${ratio}%"
            
          else
            echo "Warning: ${{ matrix.artifact }} not found"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-build
          path: packages/desktop/${{ matrix.artifact }}${{ env.COMPRESSION_EXT }}

  deploy:
    name: Deploy to Cloudflare R2
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Upload to Cloudflare R2
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Function to upload file with appropriate content-type
          upload_file() {
            local file_path="$1"
            local remote_path="$2"
            
            if [ -f "$file_path" ]; then
              echo "Uploading $file_path..."
              
              # Determine content-type based on file extension
              if [[ "$file_path" == *.gz ]]; then
                content_type="application/gzip"
              elif [[ "$file_path" == *.xz ]]; then
                content_type="application/x-xz"
              else
                content_type="application/octet-stream"
              fi
              
              wrangler r2 object put "$remote_path" \
                --file "$file_path" \
                --content-type "$content_type" \
                --remote
                
              # Get file size for logging
              file_size=$(stat -f%z "$file_path" 2>/dev/null || stat -c%s "$file_path" 2>/dev/null)
              echo "Uploaded $file_path ($file_size bytes) to $remote_path"
            else
              echo "File not found: $file_path"
            fi
          }
          
          # Upload macOS build (check both .gz and .xz)
          if [ -f "artifacts/macos-build/photo-grouper-macos.dmg.gz" ]; then
            upload_file "artifacts/macos-build/photo-grouper-macos.dmg.gz" "photo-grouper-downloads/photo-grouper-macos.dmg.gz"
          elif [ -f "artifacts/macos-build/photo-grouper-macos.dmg.xz" ]; then
            upload_file "artifacts/macos-build/photo-grouper-macos.dmg.xz" "photo-grouper-downloads/photo-grouper-macos.dmg.xz"
          else
            echo "No macOS build artifact found"
          fi

          # Upload Windows build (check both .gz and .xz)
          if [ -f "artifacts/windows-build/photo-grouper-windows.exe.gz" ]; then
            upload_file "artifacts/windows-build/photo-grouper-windows.exe.gz" "photo-grouper-downloads/photo-grouper-windows.exe.gz"
          elif [ -f "artifacts/windows-build/photo-grouper-windows.exe.xz" ]; then
            upload_file "artifacts/windows-build/photo-grouper-windows.exe.xz" "photo-grouper-downloads/photo-grouper-windows.exe.xz"
          else
            echo "No Windows build artifact found"
          fi

      - name: Build summary and cleanup
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Build completed and uploaded to R2"
          echo "Files are compressed using the best available compression method:"
          
          # List uploaded files with sizes
          echo "Uploaded files:"
          for file in artifacts/*/photo-grouper-*.*; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
              echo "- $(basename "$file"): ${size} bytes"
            fi
          done
          
          echo ""
          echo "Compression methods used:"
          echo "- XZ (.xz): Better compression ratio, slower decompression"
          echo "- GZIP (.gz): Standard compression, faster decompression"
          echo "- Files are automatically decompressed by the web interface"