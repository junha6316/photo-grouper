name: Build and Deploy Desktop App

on:
  push:
    paths:
      - "packages/desktop/**"
      - ".github/workflows/build-desktop.yml"
    branches:
      - main
      - develop
  pull_request:
    paths:
      - "packages/desktop/**"
    branches:
      - main

env:
  PYTHON_VERSION: "3.12"

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: macos
            artifact: photo-grouper-macos.dmg
            build_command: |
              # Install create-dmg for macOS packaging
              brew install create-dmg
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Check what was built
              echo "Checking dist directory contents:"
              ls -la dist/
              
              # In onedir mode with BUNDLE, the app is at dist/Photo Grouper.app
              if [ -d "dist/Photo Grouper.app" ]; then
                echo "Found app bundle at dist/Photo Grouper.app"
                # Create DMG from app bundle
                create-dmg \
                  --volname "Photo Grouper" \
                  --window-pos 200 120 \
                  --window-size 800 400 \
                  --icon-size 100 \
                  --icon "Photo Grouper.app" 200 190 \
                  --hide-extension "Photo Grouper.app" \
                  --app-drop-link 600 185 \
                  "photo-grouper-macos.dmg" \
                  "dist/"
              elif [ -d "dist/PhotoGrouper" ]; then
                echo "Found onedir build at dist/PhotoGrouper, creating DMG from directory"
                # Create a simple DMG from the directory
                hdiutil create -volname "Photo Grouper" \
                  -srcfolder "dist/PhotoGrouper" \
                  -ov -format UDZO \
                  "photo-grouper-macos.dmg"
              else
                echo "ERROR: No valid build output found in dist/"
                ls -la dist/
                exit 1
              fi

          - os: windows-latest
            target: windows
            artifact: photo-grouper-windows.exe
            build_command: |
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Move executable from onedir build
              # In onedir mode, the exe is in dist/Photo Grouper/Photo Grouper.exe
              mv "dist/Photo Grouper/Photo Grouper.exe" "photo-grouper-windows.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Setup Python and dependencies
        env:
          # Force CPU-only PyTorch to reduce size
          PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cpu"
        run: |
          cd packages/desktop
          mise use python@3.12
          uv python pin 3.12
          uv sync

      - name: Verify Python version
        run: |
          cd packages/desktop
          python --version
          uv python list

      - name: Generate app icon (macOS)
        if: matrix.target == 'macos'
        shell: bash
        run: |
          cd packages/desktop
          chmod +x scripts/generate-icons.sh
          ./scripts/generate-icons.sh

      - name: Import Code Signing Certificate (macOS)
        if: matrix.target == 'macos'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions build.keychain
          rm certificate.p12

      - name: Generate app icon (Windows)
        if: matrix.target == 'windows'
        shell: bash
        run: |
          cd packages/desktop
          # Install ImageMagick if needed
          choco install imagemagick -y --no-progress
          export PATH="/c/Program Files/ImageMagick-7.0.11-Q16:/c/Program Files/ImageMagick-7.1.1-Q16:$PATH"
          chmod +x scripts/generate-icons.sh
          ./scripts/generate-icons.sh

      - name: Build application
        shell: bash
        run: |
          cd packages/desktop
          ${{ matrix.build_command }}

      - name: Sign and Notarize Application (macOS)
        if: matrix.target == 'macos'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
        run: |
          cd packages/desktop

          # Sign the application bundle
          if [ -d "dist/Photo Grouper.app" ]; then
            echo "Signing Photo Grouper.app..."
            codesign --deep --force --verify --verbose \
              --sign "$DEVELOPER_ID_NAME" \
              --options runtime \
              "dist/Photo Grouper.app"

            # Verify signature
            codesign --verify --verbose "dist/Photo Grouper.app"

            # Create a zip for notarization
            echo "Creating zip for notarization..."
            ditto -c -k --keepParent "dist/Photo Grouper.app" "Photo Grouper.zip"

            # Submit for notarization
            echo "Submitting for notarization..."
            xcrun notarytool submit "Photo Grouper.zip" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_ID_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait

            # Staple the notarization ticket
            echo "Stapling notarization ticket..."
            xcrun stapler staple "dist/Photo Grouper.app"

            # Clean up
            rm "Photo Grouper.zip"

            echo "‚úÖ Application signed and notarized successfully"
          else
            echo "‚ö†Ô∏è App bundle not found, skipping signing"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-build
          path: packages/desktop/${{ matrix.artifact }}

  deploy:
    name: Deploy to Cloudflare R2
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install tools
        run: |
          npm install -g wrangler
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update

      - name: Upload to Cloudflare R2
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          chmod +x .github/scripts/upload-to-r2.sh

          # Upload macOS build
          if [ -f "artifacts/macos-build/photo-grouper-macos.dmg" ]; then
            .github/scripts/upload-to-r2.sh "artifacts/macos-build/photo-grouper-macos.dmg" "photo-grouper-macos.dmg"
          fi

          # Upload Windows build
          if [ -f "artifacts/windows-build/photo-grouper-windows.exe" ]; then
            .github/scripts/upload-to-r2.sh "artifacts/windows-build/photo-grouper-windows.exe" "photo-grouper-windows.exe"
          fi

      - name: Build summary
        run: |
          echo "‚úÖ Build completed and uploaded to R2"
          echo "üì¶ Uploaded files:"
          if [ -f "artifacts/macos-build/photo-grouper-macos.dmg" ]; then
            size=$(stat -f%z "artifacts/macos-build/photo-grouper-macos.dmg" 2>/dev/null || stat -c%s "artifacts/macos-build/photo-grouper-macos.dmg" 2>/dev/null)
            echo "  - photo-grouper-macos.dmg: ${size} bytes"
          fi
          if [ -f "artifacts/windows-build/photo-grouper-windows.exe" ]; then
            size=$(stat -f%z "artifacts/windows-build/photo-grouper-windows.exe" 2>/dev/null || stat -c%s "artifacts/windows-build/photo-grouper-windows.exe" 2>/dev/null)
            echo "  - photo-grouper-windows.exe: ${size} bytes"
          fi

          echo ""
          echo "üåê Web API endpoints:"
          echo "  - macOS: /api/download?platform=macos"
          echo "  - Windows: /api/download?platform=windows"

      - name: Verify download mappings
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          chmod +x .github/scripts/verify-downloads.sh
          .github/scripts/verify-downloads.sh
