name: Build and Deploy Desktop App

on:
  push:
    paths:
      - "packages/desktop/**"
      - ".github/workflows/build-desktop.yml"
    branches:
      - main
      - develop
  pull_request:
    paths:
      - "packages/desktop/**"
    branches:
      - main

env:
  PYTHON_VERSION: "3.13"

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: macos
            artifact: photo-grouper-macos.dmg
            build_command: |
              # Install create-dmg for macOS packaging
              brew install create-dmg
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Create DMG
              create-dmg \
                --volname "Photo Grouper" \
                --window-pos 200 120 \
                --window-size 800 400 \
                --icon-size 100 \
                --icon "Photo Grouper.app" 200 190 \
                --hide-extension "Photo Grouper.app" \
                --app-drop-link 600 185 \
                "photo-grouper-macos.dmg" \
                "dist/"

          - os: windows-latest
            target: windows
            artifact: photo-grouper-windows.exe
            build_command: |
              # Build with PyInstaller using spec file
              uv run pyinstaller ./photo-grouper.spec

              # Move and rename the executable
              mv "dist/Photo Grouper.exe" "photo-grouper-windows.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Setup Python and dependencies
        run: |
          cd packages/desktop
          mise install python
          uv sync

      - name: Install PyInstaller
        run: |
          cd packages/desktop
          uv add --dev pyinstaller

      - name: Create placeholder icon files (if not exist)
        shell: bash
        run: |
          mkdir -p assets
          # Create placeholder icons if they don't exist
          if [ ! -f "assets/icon.icns" ] && [ "${{ matrix.target }}" = "macos" ]; then
            # Create a simple placeholder icon for macOS (create a minimal valid ICNS file)
            echo "Creating placeholder icon for macOS"
            # Create a minimal ICNS file header
            printf '\x69\x63\x6e\x73\x00\x00\x00\x08' > assets/icon.icns
          fi
          if [ ! -f "assets/icon.ico" ] && [ "${{ matrix.target }}" = "windows" ]; then
            # Create a simple placeholder icon for Windows (create a minimal valid ICO file)
            echo "Creating placeholder icon for Windows"
            # Create a minimal ICO file header
            printf '\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x00\x00\x00\x00\x28\x01\x00\x00\x16\x00\x00\x00' > assets/icon.ico
            # Add minimal bitmap data (40 bytes for header + 64 bytes for image data + 32 bytes for mask)
            dd if=/dev/zero bs=136 count=1 >> assets/icon.ico 2>/dev/null || true
          fi

      - name: Build application
        shell: bash
        run: |
          cd packages/desktop
          ${{ matrix.build_command }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-build
          path: packages/desktop/${{ matrix.artifact }}

  deploy:
    name: Deploy to Cloudflare R2
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Upload to Cloudflare R2
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Upload macOS build
          if [ -f "artifacts/macos-build/photo-grouper-macos.dmg" ]; then
            wrangler r2 object put --reomte photo-grouper-downloads/photo-grouper-macos.dmg \
              --file artifacts/macos-build/photo-grouper-macos.dmg \
              --content-type application/octet-stream
              
          fi

          # Upload Windows build  
          if [ -f "artifacts/windows-build/photo-grouper-windows.exe" ]; then
            wrangler r2 object put --reomte photo-grouper-downloads/photo-grouper-windows.exe \
              --file artifacts/windows-build/photo-grouper-windows.exe \
              --content-type application/octet-stream

          fi

      - name: Clean up old artifacts (optional)
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Build completed and uploaded to R2"
          echo "Files available at:"
          echo "- macOS: photo-grouper-macos.dmg"
          echo "- Windows: photo-grouper-windows.exe"
